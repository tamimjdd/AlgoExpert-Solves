Longest Peak
Write a function that takes in an array of integers and returns the length of the longest peak in the array.

A peak is defined as adjacent integers in the array that are strictly increasing until they reach a tip (the highest value in the peak), at which point they become strictly decreasing. At least three integers are required to form a peak.

For example, the integers 1, 4, 10, 2 form a peak, but the integers 4, 0, 10 don't and neither do the integers 1, 2, 2, 0. Similarly, the integers 1, 2, 3 don't form a peak because there aren't any strictly decreasing integers after the 3.

Sample Input
array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]
Sample Output
6 // 0, 10, 6, 5, -1, -3

Hints
Hint 1
You can solve this question by iterating through the array from left to right once.

Hint 2
Iterate through the array from left to right, and treat every integer as the potential tip of a peak. To be the tip of a peak, an integer has to be strictly greater than its adjacent integers. What can you do when you find an actual tip?

Hint 3
As you iterate through the array from left to right, whenever you find a tip of a peak, expand outwards from the tip until you no longer have a peak. Given what peaks look like and how many peaks can therefore fit in an array, realize that this process results in a linear-time algorithm. Make sure to keep track of the longest peak you find as you iterate through the array.

solution c++:

using namespace std;

int longestPeak(vector<int> array) {
  vector<int> picks;
  int ans=0;
  for(int i=1;i<array.size();i++){
    if(i==array.size()-1) break;
    if(array[i]>array[i-1] && array[i]>array[i+1]){
       // cout<<array[i]<<" "<<array[i-1]<<" "<<array[i+1]<<" "<<i<<endl;
      picks.push_back(i);
    }
  }
  for(int i=0;i<picks.size();i++){
    int indx=picks[i]-1,indx2=picks[i]+1,count=1,current;
        cout<<"loop 1"<<endl;
    current=array[picks[i]];
    while(1){
      
      if(array[indx]<current && indx>=0){
        cout<<array[indx]<<" ";
        current=array[indx];
        count++;
        indx--;
      }
      else break;
    }
    cout<<endl;
    cout<<" loop 2"<<endl;
    current=array[picks[i]];
    while(1){
      cout<<"pick is "<<current<<" and indx2 is: "<<array[indx2]<<endl;
      if(array[indx2]<current && indx2<array.size()){
       cout<<array[indx2]<<" ";
        current=array[indx2];
        count++;
        indx2++;
      }
      else break;
    }
    ans=max(ans,count);
    cout<<endl;
    // cout<<"ans is : "<<ans<<" and pick is "<<picks[i]<<endl; 
    count=1;
  }
  
  return ans;
}

