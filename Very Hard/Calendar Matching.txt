Calendar Matching
Imagine that you want to schedule a meeting of a certain duration with a co-worker. You have access to your calendar and your co-worker's calendar (both of which contain your respective meetings for the day, in the form of [startTime, endTime]), as well as both of your daily bounds (i.e., the earliest and latest times at which you're available for meetings every day, in the form of [earliestTime, latestTime]).

Write a function that takes in your calendar, your daily bounds, your co-worker's calendar, your co-worker's daily bounds, and the duration of the meeting that you want to schedule, and that returns a list of all the time blocks (in the form of [startTime, endTime]) during which you could schedule the meeting, ordered from earliest time block to latest.

Note that times will be given and should be returned in military time. For example: 8:30, 9:01, and 23:56.

Also note that the given calendar times will be sorted by start time in ascending order, as you would expect them to appear in a calendar application like Google Calendar.

Sample Input
calendar1 = [['9:00', '10:30'], ['12:00', '13:00'], ['16:00', '18:00']]
dailyBounds1 = ['9:00', '20:00']
calendar2 = [['10:00', '11:30'], ['12:30', '14:30'], ['14:30', '15:00'], ['16:00', '17:00']]
dailyBounds2 = ['10:00', '18:30']
meetingDuration = 30
Sample Output
[['11:30', '12:00'], ['15:00', '16:00'], ['18:00', '18:30']]
Hints
Hint 1
In order to find blocks of time during which you and your coworker can have a meeting, you have to first find all of the unavailabilities between the two of you. An unavailability is any block of time during which at least one of you is busy.

Hint 2
You'll have to start by taking into account the daily bounds; the daily bounds can be represented by two additional meetings in each of your calendars.

Hint 3
Once you've taken the daily bounds into account, you'll want to merge the two calendars into a single calendar of meetings and then flatten that calendar in order to eliminate overlapping and back-to-back meetings. This will give you a calendar of unavailabilities, from which you can pretty easily find the list of matching availabilities.

Optimal Space & Time Complexity
O(c1 + c2) time | O(c1 + c2) space - where c1 and c2 are the respective numbers of meetings in calendar1 and calendar2

c++ solution::

#include <vector>
using namespace std;

struct StringMeeting {
  string start;
  string end;
};

struct Meeting{
  int start;
  int end;
};

string minutesToTime(int minutes){
  int hours = minutes / 60;
  int mins = minutes % 60;
  string hoursString = to_string(hours);
  string minutesString = mins< 10 ? "0"+ to_string(mins): to_string(mins);
  return hoursString + ":" + minutesString;
}

int timeToMinutes(string time){
  int delimiterPos = time.find(":");
  int hours = stoi(time.substr(0,delimiterPos));
  int minutes = stoi(time.substr(delimiterPos+1,time.length()));
  return hours* 60 + minutes;
}

vector<Meeting> updateCalender(vector<StringMeeting> calender, StringMeeting dailyBounds){
  vector<StringMeeting> updatedCalender;
updatedCalender.push_back({"0:00", dailyBounds.start});
  updatedCalender.insert(updatedCalender.end(),calender.begin(),calender.end());
  updatedCalender.push_back({dailyBounds.end,"23:59"});
  vector<Meeting> calenderInMinutes;
  for(int i=0;i<updatedCalender.size();i++){
    calenderInMinutes.push_back({timeToMinutes(updatedCalender[i].start),timeToMinutes(updatedCalender[i].end)});
  }
  return calenderInMinutes;
}

vector<Meeting> mergeCalenders(vector<Meeting> calender1, vector<Meeting> calender2){
  vector<Meeting> merged;
  int i=0,j=0;
  while(i<calender1.size() && j<calender2.size()){
    Meeting meeting1 = calender1[i];
    Meeting meeting2 = calender2[j];
    if(meeting1.start<meeting2.start){
      merged.push_back(meeting1);
      i++;
    }else{
      merged.push_back(meeting2);
      j++;
    }
  }
  while(i< calender1.size()){
    merged.push_back(calender1[i++]);
  }
  while(j<calender2.size()){
    merged.push_back(calender2[j++]);
  }
  return merged;
}

vector<Meeting> flattenCalender(vector<Meeting> calender){
  vector<Meeting> flattened = {calender[0]};
  for(int i=1;i<calender.size();i++){
    Meeting currentMeeting = calender[i];
    Meeting previousMeeting = flattened[flattened.size()-1];
    if(previousMeeting.end >= currentMeeting.start){
      Meeting newPreviousMeeting = {
      previousMeeting.start, max(previousMeeting.end, currentMeeting.end)
      };
      flattened[flattened.size()-1] = newPreviousMeeting;
    }else{
      flattened.push_back(currentMeeting);
    }
  }
  return flattened;
}

vector<StringMeeting> getMatchingAvailabilities(vector<Meeting> calender, int meetingDuration){
  vector<Meeting> matchingAvailabilities;
  for(int i=1;i<calender.size();i++){
    int start= calender[i-1].end;
    int end= calender[i].start;
    int availabilityDuration = end- start;
    if(availabilityDuration >= meetingDuration){
      matchingAvailabilities.push_back({start,end});
    }
  }

  vector<StringMeeting> matchingAvailabilitiesInHours;
  for(int i=0;i<matchingAvailabilities.size();i++){
    matchingAvailabilitiesInHours.push_back({
      minutesToTime(matchingAvailabilities[i].start),
      minutesToTime(matchingAvailabilities[i].end)
    });
  }
  return matchingAvailabilitiesInHours;
}

vector<StringMeeting> calendarMatching(vector<StringMeeting> calendar1,
                                       StringMeeting dailyBounds1,
                                       vector<StringMeeting> calendar2,
                                       StringMeeting dailyBounds2,
                                       int meetingDuration) {
  vector<Meeting> updatedCalender1 = updateCalender(calendar1,dailyBounds1);
  vector<Meeting> updatedCalender2 = updateCalender(calendar2, dailyBounds2);
  vector<Meeting> mergedCalender = mergeCalenders(updatedCalender1, updatedCalender2);
  vector<Meeting> flattenedCalender = flattenCalender(mergedCalender);
  return getMatchingAvailabilities(flattenedCalender,meetingDuration);
}