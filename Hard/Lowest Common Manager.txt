Lowest Common Manager
You're given three inputs, all of which are instances of an OrgChart class that have a directReports property pointing to their direct reports. The first input is the top manager in an organizational chart (i.e., the only instance that isn't anybody else's direct report), and the other two inputs are reports in the organizational chart. The two reports are guaranteed to be distinct.

Write a function that returns the lowest common manager to the two reports.

Sample Input
// From the organizational chart below.
topManager = Node A
reportOne = Node E
reportTwo = Node I
          A
       /     \
      B       C
    /   \   /   \
   D     E F     G
 /   \
H     I
Sample Output
Node B
Hints
Hint 1
Given a random subtree in the organizational chart, the manager at the root of that subtree is common to any two reports in the subtree.

Hint 2
Knowing Hint #1, the lowest common manager to two reports in an organizational chart is the root of the lowest subtree containing those two reports. Find that lowest subtree to find the lowest common manager.

Hint 3

Optimal Space & Time Complexity
O(n) time | O(d) space - where n is the number of people in the org and d is the depth (height) of the org chart

c++ solution::

using namespace std;

class OrgChart {
public:
  char name;
  vector<OrgChart *> directReports;

  OrgChart(char name) {
    this->name = name;
    this->directReports = {};
  }

  void addDirectReports(vector<OrgChart *> directReports);
};

struct OrgInfo{
  OrgChart *lowestCommonManager;
  int numImportantReports;
};
OrgInfo getOrgInfo(OrgChart *manager,OrgChart *reportOne, OrgChart *reportTwo){
  int numImportantReports = 0;
  for(OrgChart *directReport : manager->directReports){
    OrgInfo orgInfo = getOrgInfo(directReport,reportOne,reportTwo);
    if(orgInfo.lowestCommonManager != nullptr){
      return orgInfo;
    }
    numImportantReports += orgInfo.numImportantReports;
  }
  if(manager == reportOne || manager == reportTwo) numImportantReports++;
  OrgChart *lowestCommonManager = numImportantReports == 2 ? manager : nullptr;
  OrgInfo newOrgInfo = {lowestCommonManager, numImportantReports};
  return newOrgInfo;
}
OrgChart *getLowestCommonManager(OrgChart *topManager, OrgChart *reportOne,
                                 OrgChart *reportTwo) {
  // Write your code here.
  return getOrgInfo(topManager,reportOne,reportTwo).lowestCommonManager;
}
