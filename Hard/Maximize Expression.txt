Maximize Expression
Write a function that takes in an array of integers and returns the largest possible value for the expression array[a] - array[b] + array[c] - array[d], where a, b, c, and d are indices of the array and a < b < c < d.

If the input array has fewer than 4 elements, your function should return 0.

Sample Input
array = [3, 6, 1, -3, 2, 7]
Sample Output
4
// Choose a = 1, b = 3, c = 4, and d = 5
// -> 6 - (-3) + 2 - 7 = 4
Hints
Hint 1
The brute-force approach to solving this problem is to simply iterate through every valid choice of a, b, c, and d and to evaluate the expression at each iteration. While doing this, you can keep track of the maximum value that you find and return it after considering all possibilities. This solution runs in O(n^4) time; can you think of a way to solve this faster?

Hint 2
You can solve this problem using dynamic programming with a time complexity of O(n); however, you'll need to use external space.

Hint 3
If you know what the maximum possible value of a is at each index in the array, you can find the maximum possible value of a - b at each individual index in the array in O(1) time (or in O(n) time for all indices). The same thing holds for finding the maximum possible value of a - b + c if you know the maximum possible value of a - b at each index. How does this fact help you solve the entire problem in O(n) time?

Hint 4
Start by finding the maximum possible value of a at each index in the array, meaning the maximum value of a that you can obtain at each index i if a is chosen from an index between 0 and i, inclusive. Store all of these values in an array, and use them to help you determine the maximum possible value of a - b at each index. Do the same for a - b + c (using the results from a - b) and a - b + c - d (using the results from a - b + c). Once you make it to a - b + c - d, you'll be able to determine the maximum value of the expression.

Optimal Space & Time Complexity
O(n) time | O(n) space - where n is the length of the array

c++ solution: O(n^4)

#include <vector>
using namespace std;

int rec(vector<int>array,int ind,int eqInd,int sum,int arr[4]){
  cout<<eqInd<<" "<<ind<<" "<<sum<<endl;
  if(eqInd==4) return sum;
  if(ind>=array.size()) return 0;
  
  if(eqInd==0){
    arr[0]=ind;
    return max(rec(array,ind+1,eqInd+1,sum+array[ind],arr),rec(array,ind+1,eqInd,sum,arr));
  }else if(eqInd==1){
    if(arr[0]>ind) return 0;
    arr[1]=ind;
    return max(rec(array,ind+1,eqInd+1,sum-array[ind],arr),rec(array,ind+1,eqInd,sum,arr));
  }else if(eqInd==2){
    if(arr[0]>arr[1] || arr[0]>ind || arr[1]>ind) return 0;
    arr[2]=ind;
    return max(rec(array,ind+1,eqInd+1,sum+array[ind],arr),rec(array,ind+1,eqInd,sum,arr));
  }else{
    if(arr[0]>arr[1] || arr[0]>arr[2] || arr[0]>ind || arr[1]>arr[2] || arr[1]>ind || arr[2]>ind) return 0;
    arr[3]=ind;
    return max(rec(array,ind+1,eqInd+1,sum-array[ind],arr),rec(array,ind+1,eqInd,sum,arr));
  }
}

int maximizeExpression(vector<int> array) {
  if(array.size()<4) return 0;
  else if(array.size()==4) return array[0]-array[1]+array[2]-array[3];
  int arr[4]={INT_MIN,INT_MIN,INT_MIN,INT_MIN};
  return rec(array,0,0,0,arr);
}

algoexpert Solution: time=O(n) space=O(n)


#include <vector>
using namespace std;

int maximizeExpression(vector<int> array) {
  if(array.size()<4) return 0;
  vector<int>first(array.size(),0);
  first[0]=array[0];
  for(int i=1;i<array.size();i++){
    if(array[i]>first[i-1]){
      first[i]=array[i];
    }
    else{
      first[i]=first[i-1];
    }
  }
  
  vector<int>second(array.size(),0);
  second[0]=INT_MIN;
  for(int i=1;i<array.size();i++){
    if((first[i-1]-array[i])>second[i-1]){
      second[i]=first[i-1]-array[i];
    }
    else{
      second[i]=second[i-1];
    }
  }

  vector<int>third(array.size(),0);
  third[1]=INT_MIN;
  for(int i=2;i<array.size();i++){
    if((second[i-1]+array[i])>third[i-1]){
      third[i]=second[i-1]+array[i];
    }
    else{
      third[i]=third[i-1];
    }
  }

  vector<int>forth(array.size(),0);
  forth[2]=INT_MIN;
  for(int i=3;i<array.size();i++){
    if((third[i-1]-array[i])>forth[i-1]){
      forth[i]=third[i-1]-array[i];
    }
    else{
      forth[i]=forth[i-1];
    }
  }
  return forth[array.size()-1];
}


