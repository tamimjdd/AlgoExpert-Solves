Same BSTs
An array of integers is said to represent the Binary Search Tree (BST) obtained by inserting each integer in the array, from left to right, into the BST.

Write a function that takes in two arrays of integers and determines whether these arrays represent the same BST. Note that you're not allowed to construct any BSTs in your code.

A BST is a Binary Tree that consists only of BST nodes. A node is said to be a valid BST node if and only if it satisfies the BST property: its value is strictly greater than the values of every node to its left; its value is less than or equal to the values of every node to its right; and its children nodes are either valid BST nodes themselves or None / null.

Sample Input
arrayOne = [10, 15, 8, 12, 94, 81, 5, 2, 11]
arrayTwo = [10, 8, 5, 15, 2, 12, 11, 94, 81]
Sample Output
true // both arrays represent the BST below
         10
       /     \
      8      15
    /       /   \
   5      12    94
 /       /     /
2       11    81

Hints
Hint 1
You can immediately conclude that the input arrays don't represent the same BST if their first values aren't equal to each other, since their first values represent the root of the BST. Similarly, you can conclude this if their lengths are different. If their first values are equal to each other and their lengths are the same, what should your next step be?

Hint 2
Given an array of integers, all of the values in the array that are smaller than the first value in the array are located in the left subtree of the BST that the array represents, and all of the values in the array that are greater than or equal to the first value in the array are located in the right subtree of the BST that the array represents. Use this fact and Hint #1 to recursively determine whether all subtrees in the BSTs represented by the arrays are equal to each other.

Hint 3
Write a recursive function that takes in two arrays of integers. If the first values of the arrays aren't equal to each other or if the arrays don't have the same length, the arrays don't represent the same BST. If the first values and lengths are equal to each other, respectively, perform the following actions on both arrays: gather all integers that are smaller than the first integer; these form a new array that represents the left subtree of the relevant BST; gather all integers that are greater than or equal to the first integer; these form a new array that represents the right subtree of the relevant BST. Call the recursive function twice: once with the two left-subtree arrays and once with the two right-subtree arrays.

Hint 4
Do you actually need to create all of the auxiliary arrays mentioned in Hint #3?

Optimal Space & Time Complexity
O(n^2) time | O(d) space - where n is the number of nodes in each array, respectively, and d is the depth of the BST that they represent


solution 1:

#include <vector>

using namespace std;

vector<int> helperSmall(vector<int> array){
    vector<int>smallest={};
  for(int i=1;i<array.size();i++){
    if(array[i]<array[0]){
      smallest.push_back(array[i]);
    }
  }
  return smallest;
}

vector<int> helperBig(vector<int> array){
    vector<int>largest={};
  for(int i=1;i<array.size();i++){
    if(array[i]>=array[0]){
      largest.push_back(array[i]);
    }
  }
  return largest;
}

bool sameBsts(vector<int> arrayOne, vector<int> arrayTwo) {
    if(arrayOne.size()!=arrayTwo.size()) return false;

    if(arrayOne.size()==0 && arrayTwo.size()==0) return true;
    
    if(arrayOne[0]!=arrayTwo[0]) return false;


    vector<int> leftOne = helperSmall(arrayOne);
    vector<int> leftTwo = helperSmall(arrayTwo);
    vector<int> rightOne = helperBig(arrayOne);
    vector<int> rightTwo = helperBig(arrayTwo);
 return sameBsts(leftOne,leftTwo) && sameBsts(rightOne,rightTwo);
}


solution 2:

#include <vector>

using namespace std;

int helperSmall(vector<int> array,int idx1,int minVal){
  for(int i=idx1+1;i<array.size();i++){
    if(array[i]<array[idx1] && array[i]>=minVal) return i;
  }
  return -1;
}
int helperBig(vector<int> array,int idx2,int maxVal){
  for(int i=idx2+1;i<array.size();i++){
    if(array[i]>=array[idx2] && array[i]<maxVal) return i;
  }
  return -1;
}
bool helper(vector<int>arrayOne,vector<int>arrayTwo,int rootIdx1,int rootIdx2,
int minVal,int maxVal){
  if(rootIdx1==-1 || rootIdx2 == -1) return rootIdx1== rootIdx2;
  if(arrayOne[rootIdx1]!=arrayTwo[rootIdx2]) return false;

  int leftOne=helperSmall(arrayOne,rootIdx1,minVal);
  int leftTwo=helperSmall(arrayTwo,rootIdx2,minVal);
  int rightOne=helperBig(arrayOne,rootIdx1,maxVal);
  int rightTwo=helperBig(arrayTwo,rootIdx2,maxVal);

  return helper(arrayOne,arrayTwo,leftOne,leftTwo,minVal,arrayOne[rootIdx1]) && 
    helper(arrayOne,arrayTwo,rightOne,rightTwo,arrayOne[rootIdx1],maxVal);
}



bool sameBsts(vector<int> arrayOne, vector<int> arrayTwo) {
    return helper(arrayOne,arrayTwo,0,0,INT_MIN,INT_MAX);
}
